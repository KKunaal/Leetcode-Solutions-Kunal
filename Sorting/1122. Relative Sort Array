## NLogN Solution using heaps and hash maps

from typing import List 
class Solution:
    def minheapify(self,arr1,i):
        l=2*i+1
        r=2*i+2
        
        if l<len(arr1) and arr1[l]<arr1[i]:
            smallest=l
        else:
            smallest=i
        if r<len(arr1) and arr1[r]<arr1[smallest]:
            smallest=r
        
        if smallest!=i:
            temp=arr1[smallest]
            arr1[smallest]=arr1[i]
            arr1[i]=temp
            self.minheapify(arr1,smallest)
        
    def modifiedminheapify(self,arr1,i,d):
        l=2*i+1
        r=2*i+2
        
        if l<len(arr1) and d[arr1[l]]<d[arr1[i]]:
            smallest=l
        else:
            smallest=i
        if r<len(arr1) and d[arr1[r]]<d[arr1[smallest]]:
            smallest=r
        
        if smallest!=i:
            temp=arr1[smallest]
            arr1[smallest]=arr1[i]
            arr1[i]=temp
            self.modifiedminheapify(arr1,smallest,d)
    
    def swap(self,arr1,i,j):
        temp=arr1[i]
        arr1[i]=arr1[j]
        arr1[j]=temp
    
    def relativeSortArray(self, arr1: List[int], arr2: List[int]) -> List[int]:
        d={}
        vis=set([])
        for i in range(len(arr2)):
            d[arr2[i]]=i    
            vis.add(arr2[i])
        
        n=len(arr1)
        nl=int(n/2)
        for i in range(nl-1,-1,-1):
            self.minheapify(arr1,i)
        
        lst=[]
        for i in range(len(arr1)-1,-1,-1):
            self.swap(arr1,0,i)
            lst.append(arr1.pop(len(arr1)-1))
            self.minheapify(arr1,0)
            
        #print(lst)
        arr1=[]
        lst1=[]
        for i in range(len(lst)):
            if lst[i] in vis:
                arr1.append(lst[i])
            else:
                lst1.append(lst[i])
        
        n=len(arr1)
        nl=int(n/2)
        for i in range(nl-1,-1,-1):
            self.modifiedminheapify(arr1,i,d)

        lst2=[]
        for i in range(len(arr1)-1,-1,-1):
            self.swap(arr1,0,i)
            lst2.append(arr1.pop(len(arr1)-1))
            self.modifiedminheapify(arr1,0,d)
        
        return lst2+lst1
